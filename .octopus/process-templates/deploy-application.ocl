name = "deploy-application"
description = "Template to deploy application to a target environment"

icon {
    color = "#EF6F1F"
    id = "bullseye-arrow"
}

parameter "appName" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "Will also create the release-name"
    label = "The name of the application to deploy"
}

parameter "action" {
    display_settings = {
        Octopus.ControlType = "Select"
        Octopus.SelectOptions = <<-EOT
            deploy|deploy
            delete|delete
            rescale|rescale
            wipe_env|wipe_env
            EOT
    }
    help_text = <<-EOT
            Examples:
            - deploy
            - delete
            - rescale
            - wipe_env
            EOT
    label = "Action which the pipeline will perform"

    value "deploy" {}
}

parameter "strategy" {
    display_settings = {
        Octopus.ControlType = "Select"
        Octopus.SelectOptions = <<-EOT
            rolling_update|rolling-update
            canary|canary
            blue_green|blue-green
            EOT
    }
    help_text = <<-EOT
            Can either be
            - rolling_update
            - canary
            - blue_green
            EOT
    label = "Strategy used for deployment"

    value "rolling_update" {}
}

parameter "deploymentTarget" {
    display_settings = {
        Octopus.ControlType = "TargetTags"
    }
    help_text = "Target of the deployment"
    label = "Target of the deployment"
}

parameter "replicas" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = ""
    label = "replicas values for rescaling"

    value "" {}
}

parameter "create_namespace" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = ""
    label = "Init namespace creation?"
}

step "init-namespace" {
    name = "Init namespace"
    properties = {
        Octopus.Action.TargetRoles = "#{deploymentTarget}"
    }

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptBody = <<-EOT
                
                NAMESPACE=$(get_octopusvariable "target.namespace")
                # Check if the namespace exists
                if ! kubectl get namespace "$NAMESPACE" > /dev/null 2>&1; then
                  echo "Namespace: '$NAMESPACE' does not exist. Creating it..."
                  kubectl create namespace "$NAMESPACE"
                else
                  echo "Namespace '$NAMESPACE' already exists."
                fi
                
                # List all resources in the namespace
                echo "Listing all resources in namespace '$NAMESPACE':"
                kubectl get all -n "$NAMESPACE"
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
            OctopusUseBundledTooling = "False"
        }
    }
}

step "rescale-deployment" {
    name = "Rescale deployment"
    properties = {
        Octopus.Action.TargetRoles = "#{deploymentTarget}"
    }

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptBody = <<-EOT
                echo "rescaling deployment"
                NAMESPACE=$(get_octopusvariable "target.namespace")
                
                kubectl scale deployment $(get_octopusvariable "appName") --replicas=$(get_octopusvariable "replicas") -n $NAMESPACE
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""
    }
}