name = "deploy-application"
description = "Template to deploy application to a target environment"

icon {
    color = "#EF6F1F"
    id = "bullseye-arrow"
}

parameter "appName" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "Will also create the release-name"
    label = "The name of the application to deploy"
}

parameter "action" {
    display_settings = {
        Octopus.ControlType = "Select"
        Octopus.SelectOptions = <<-EOT
            deploy|deploy
            delete|delete
            rescale|rescale
            wipe_env|wipe_env
            EOT
    }
    help_text = <<-EOT
            Examples:
            - deploy
            - delete
            - rescale
            - wipe_env
            EOT
    label = "Action which the pipeline will perform"

    value "deploy" {}
}

parameter "strategy" {
    display_settings = {
        Octopus.ControlType = "Select"
        Octopus.SelectOptions = <<-EOT
            stable|rolling-update
            canary|canary
            blue_green|blue-green
            EOT
    }
    help_text = <<-EOT
            Can either be
            - stable
            - canary
            - blue_green
            EOT
    label = "Strategy used for deployment"

    value "stable" {}
}

parameter "deploymentTarget" {
    display_settings = {
        Octopus.ControlType = "TargetTags"
    }
    help_text = "Target of the deployment"
    label = "Target of the deployment"
}

parameter "replicas" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = ""
    label = "replicas values for rescaling"

    value "" {}
}

parameter "create_namespace" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = ""
    label = "Init namespace creation?"
}

step "init-namespace" {
    condition = "Variable"
    name = "initNamespace"
    properties = {
        Octopus.Action.TargetRoles = "#{deploymentTarget}"
        Octopus.Step.ConditionVariableExpression = "#{if create_namespace == \"true\"}true#{/if}"
    }

    action "initnamespace" {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptBody = <<-EOT
                
                NAMESPACE=oc-$(get_octopusvariable "Octopus.Environment.Name")
                # Check if the namespace exists
                if ! kubectl get namespace "$NAMESPACE" > /dev/null 2>&1; then
                  echo "Namespace: '$NAMESPACE' does not exist. Creating it..."
                  kubectl create namespace "$NAMESPACE"
                else
                  echo "Namespace '$NAMESPACE' already exists."
                fi
                
                # List all resources in the namespace
                echo "Listing all resources in namespace '$NAMESPACE':"
                kubectl get all -n "$NAMESPACE"
                
                set_octopusvariable "octopus_namespace" $NAMESPACE
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
            OctopusUseBundledTooling = "False"
        }
    }
}

step "wipe-environment" {
    condition = "Variable"
    name = "Wipe environment"
    properties = {
        Octopus.Action.TargetRoles = "#{deploymentTarget}"
        Octopus.Step.ConditionVariableExpression = " #{if action == \"wipe_env\"}true#{else}false#{/if}"
    }

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptBody = <<-EOT
                NAMESPACE=oc-$(get_octopusvariable "Octopus.Environment.Name")
                
                helm list -n $NAMESPACE -q | xargs -r -L1 helm uninstall -n $NAMESPACE
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""
    }
}

step "delete-deployment" {
    condition = "Variable"
    name = "Delete deployment"
    properties = {
        Octopus.Action.TargetRoles = "#{deploymentTarget}"
        Octopus.Step.ConditionVariableExpression = " #{if action == \"delete\"}true#{else}false#{/if}"
    }

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptBody = <<-EOT
                echo "deleting deployment $(get_octopusvariable "appName")-$(get_octopusvariable "strategy")"
                NAMESPACE=oc-$(get_octopusvariable "Octopus.Environment.Name")
                
                helm uninstall $(get_octopusvariable "appName")-$(get_octopusvariable "strategy") -n $NAMESPACE
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""
    }
}

step "rescale-deployment" {
    condition = "Variable"
    name = "Rescale deployment"
    properties = {
        Octopus.Action.TargetRoles = "#{deploymentTarget}"
        Octopus.Step.ConditionVariableExpression = "#{if action == \"rescale\"}true#{/if}"
    }

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptBody = <<-EOT
                NAMESPACE=oc-$(get_octopusvariable "Octopus.Environment.Name")
                DEPLOYMENT_NAME=$(get_octopusvariable "appName")-$(get_octopusvariable "strategy")
                echo "rescaling deployment $DEPLOYMENT_NAME from namespace $NAMESPACE, to replicas: $(get_octopusvariable "replicas")"
                
                kubectl scale deployment $DEPLOYMENT_NAME --replicas=$(get_octopusvariable "replicas") -n $NAMESPACE
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""
    }
}

step "deploy-application" {
    condition = "Variable"
    name = "Deploy application"
    properties = {
        Octopus.Action.TargetRoles = "container-hosting-platform-k8s"
        Octopus.Step.ConditionVariableExpression = "#{if action == \"deploy\"}true#{else}false#{/if}"
    }

    action {
        action_type = "Octopus.HelmChartUpgrade"
        properties = {
            Octopus.Action.GitRepository.Source = "External"
            Octopus.Action.Helm.AdditionalArgs = "--set mode=#{strategy}"
            Octopus.Action.Helm.ChartDirectory = "helmcharts/#{appName}/"
            Octopus.Action.Helm.Namespace = "oc-#{Octopus.Environment.Name}"
            Octopus.Action.Helm.ReleaseName = "#{appName}-#{strategy}"
            Octopus.Action.Helm.ResetValues = "True"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Script.ScriptSource = "GitRepository"
        }
        worker_pool_variable = ""

        git_dependencies {
            default_branch = "main"
            git_credential_id = "GitCredentials-41"
            git_credential_type = "Library"
            repository_uri = "https://github.com/digitalPlumber23/octopus-transaction.git"
        }
    }
}

step "change-weights-to-60" {
    condition = "Variable"
    name = "Change weights to 60"
    properties = {
        Octopus.Step.ConditionVariableExpression = " #{if strategy == \"canary\"}true#{else}false#{/if}"
    }

    action {
        action_type = "Octopus.Manual"
        properties = {
            Octopus.Action.Manual.BlockConcurrentDeployments = "False"
            Octopus.Action.Manual.Instructions = "Approving this step will change the weight of the canary release to 60"
        }
        worker_pool_variable = ""
    }
}

step "deploy-application-adjust-weight-to-60" {
    condition = "Variable"
    name = "Deploy application - adjust weight to 60"
    properties = {
        Octopus.Action.TargetRoles = "container-hosting-platform-k8s"
        Octopus.Step.ConditionVariableExpression = " #{if strategy == \"canary\"}true#{else}false#{/if}"
    }

    action {
        action_type = "Octopus.HelmChartUpgrade"
        properties = {
            Octopus.Action.GitRepository.Source = "External"
            Octopus.Action.Helm.AdditionalArgs = "--set mode=#{strategy} --set ingress.canaryWeight=60"
            Octopus.Action.Helm.ChartDirectory = "helmcharts/#{appName}/"
            Octopus.Action.Helm.Namespace = "oc-#{Octopus.Environment.Name}"
            Octopus.Action.Helm.ReleaseName = "#{appName}-#{strategy}"
            Octopus.Action.Helm.ResetValues = "True"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Script.ScriptSource = "GitRepository"
        }
        worker_pool_variable = ""

        git_dependencies {
            default_branch = "main"
            git_credential_id = "GitCredentials-41"
            git_credential_type = "Library"
            repository_uri = "https://github.com/digitalPlumber23/octopus-transaction.git"
        }
    }
}

step "promote-canary-to-stable" {
    condition = "Variable"
    name = "Promote canary to stable"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{if Octopus.Action[deploy-application-adjust-weight-to-60].StatusCode == \"Succeeded\" and strategy == \"canary\"}true#{else}false#{/if}"
    }

    action {
        action_type = "Octopus.Manual"
        properties = {
            Octopus.Action.Manual.BlockConcurrentDeployments = "False"
            Octopus.Action.Manual.Instructions = "Approving this step will promote the canary deployment to stable (live)"
        }
        worker_pool_variable = ""
    }
}

step "deploy-a-helm-chart" {
    condition = "Variable"
    name = "Promote canary to stable (live)"
    properties = {
        Octopus.Action.TargetRoles = "container-hosting-platform-k8s"
        Octopus.Step.ConditionVariableExpression = " #{if strategy == \"canary\"}true#{else}false#{/if}"
    }

    action {
        action_type = "Octopus.HelmChartUpgrade"
        properties = {
            Octopus.Action.GitRepository.Source = "External"
            Octopus.Action.Helm.ChartDirectory = "helmcharts/#{appName}/"
            Octopus.Action.Helm.Namespace = "oc-#{Octopus.Environment.Name}"
            Octopus.Action.Helm.ReleaseName = "#{appName}-stable"
            Octopus.Action.Helm.ResetValues = "True"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Script.ScriptSource = "GitRepository"
        }
        worker_pool_variable = ""

        git_dependencies {
            default_branch = "main"
            git_credential_id = "GitCredentials-41"
            git_credential_type = "Library"
            repository_uri = "https://github.com/digitalPlumber23/octopus-transaction.git"
        }
    }
}

step "delete-canary-resources" {
    condition = "Variable"
    name = "Delete canary resources"
    properties = {
        Octopus.Action.TargetRoles = "#{deploymentTarget}"
        Octopus.Step.ConditionVariableExpression = " #{if strategy == \"canary\"}true#{else}false#{/if}"
    }

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptBody = "helm uninstall -n oc-$(get_octopusvariable \"Octopus.Environment.Name\") $(get_octopusvariable \"appName\")-$(get_octopusvariable \"strategy\")"
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""
    }
}